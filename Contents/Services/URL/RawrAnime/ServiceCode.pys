import packer
import openload


######################################################################################

BASE_URL = 'http://rawranime.tv'
RE_MP4UPLOAD = Regex('(?<="file": ")http:.*(?=")')
RE_YOURUPLOAD = Regex("(?<=file: ').*mp4(?=')")
RE_UPLOADC = Regex("(?<='file',').*(?=')")
RE_VIDEONEST = Regex('(?<=file: ").*(?=",)')
RE_VIDBOX = Regex("(?<=url: ')http:\/\/serv.*..mp4(?=')")
RE_DAILYMOTION = Regex('(?<=stream_h264_url":").*(?=","stream_h264_ld_url)')
ICON_COVER = "icon-cover.png"

RE_BACKGROUND_IMAGE = Regex('(?<=data-src="\/\/).*(?=">)')
RE_VIDEONEST_PACKED = Regex('(?<=javascript">)eval\(.*(?=</script><s)')

######################################################################################
# Loads metadata from ep_url and returns VideoClipObject

def MetadataObjectForURL(url):
    page_data = HTML.ElementFromURL(url)
    show_data = HTML.ElementFromURL(BASE_URL + page_data.xpath("//a[@id='video-anime']/@href")[0])
    ep_title = page_data.xpath("//div[@id='video-title']/span/text()")[0].strip()
    anime_info_listimage_string = HTML.StringFromElement(show_data.xpath("//div[@id='anime-info-listimage']")[0])
    image_url = RE_BACKGROUND_IMAGE.search(anime_info_listimage_string).group()
    show_thumb = "http://" + image_url
    show_art = ("http://" + RE_BACKGROUND_IMAGE.search(HTML.StringFromElement(show_data.xpath("//div[@id='parallax-background']")[0])).group().split('"')[0]) if not(len(show_data.xpath("//div[@class = 'listblur']"))) > 0 else ""
    show_summary = ''.join(show_data.xpath("//div[@id = 'anime-info-synopsis']/p/text()"))
    show_genres = show_data.xpath("//div[@id='anime-info-genres']/a[@class='anime-info-genre']/text()")
    show_date = int(show_data.xpath("//div[@class='anime-info-data-info']/span/text()")[0].split(" ")[1])
    try:
        show_rating = float(show_data.xpath("//div[@class='anime-info-data-label']/text()")[0].strip().split("Rating ")[1])
    except:
        show_rating = 0.00

    return MovieObject(
        title = ep_title,
        summary = show_summary,
        thumb = show_thumb,
        art = show_art,
        rating = show_rating,
        year = show_date,
        genres = show_genres#,
        #source_title = show_source
        )

######################################################################################
# Sets up and sends a request for the video iframe link before passing to PlayVideo

def MediaObjectsForURL(url):
    page_data = HTML.ElementFromURL(url)
    resolution = page_data.xpath("//div[@class='scroller-inner']/div[contains(@class,'active')]")[0].get('data-quality')#.split('p')[0]
    if resolution.find("1080") >= 0:
        resolution = 1080
    elif resolution.find("720") >= 0:
        resolution = 720
    else:
        resolution = 360

    return[
        MediaObject(
            optimized_for_streaming = True,
            container = Container.MP4,
            audio_channels = 2,
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            video_resolution = resolution,
            parts = [PartObject(key=Callback(PlayVideo, url = url))]
            )
        ]

######################################################################################
# Checks the iframe url for a service we know how to handle, if found returns video link

@indirect
def PlayVideo(url):

    page_data = HTML.ElementFromURL(url)
    url = page_data.xpath("//div[@class='scroller-inner']/div[contains(@class,'active')]")[0].get('data-src')
    
    if url.find("mp4upload") >= 0:
        page_data = HTML.ElementFromURL(url)
        string_data = HTML.StringFromElement(page_data)
        url = RE_MP4UPLOAD.search(string_data).group()
        Log(url)
        return IndirectResponse(VideoClipObject, key=url)

    if url.find("yourupload") >= 0:
        page_data = HTML.ElementFromURL(url)
        string_data = HTML.StringFromElement(page_data)
        url = RE_YOURUPLOAD.search(string_data).group()
        Log(url)
        return IndirectResponse(VideoClipObject, key=url)

    if url.find("uploadc") >= 0:
        page_data = HTML.ElementFromURL(url)
        string_data = HTML.StringFromElement(page_data)
        url = RE_UPLOADC.search(string_data).group()
        Log(url)
        return IndirectResponse(VideoClipObject, key=url)

    if url.find("videonest") >= 0:
        page_data = HTML.ElementFromURL(url)
        string_data = HTML.StringFromElement(page_data)
        url = RE_VIDEONEST.search(string_data).group()
        Log(url)
        return IndirectResponse(VideoClipObject, key=url)

    if url.find("openload") >= 0:
        page_data = HTML.ElementFromURL(url)
        string_data = HTML.StringFromElement(page_data)
        url = openload.decode_openload(string_data)
        Log(url)
        return IndirectResponse(VideoClipObject, key=url)

    if url.find("vidbox") >= 0:
        page_data = HTML.ElementFromURL(url)
        string_data = HTML.StringFromElement(page_data)
        url = RE_VIDBOX.search(string_data).group()
        Log(url)
        return IndirectResponse(VideoClipObject, key=url)

    if url.find("dailymotion") >= 0:
        page_data = HTML.ElementFromURL(url)
        string_data = HTML.StringFromElement(page_data)
        url = RE_DAILYMOTION.search(string_data).group()
        url = url.translate(None, '\\')
        Log(url)
        return IndirectResponse(VideoClipObject, key=url)

    return url
